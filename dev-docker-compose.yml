services:
  fastapi:
    build: ./backend
    container_name: fastapi
    ports:
      - "8000:8000"
      - "5678:5678"  # Debugging port
    volumes:
      - ./backend:/backend
    environment:
      - MONGO_URI=${MONGO_URI}
      - debug=${DEBUG}
    env_file:
      - .env
    depends_on:
      - mongo
    networks:
      - app-network
    restart: always
    develop:
      watch:
        - path: ./backend/app
          target: /backend/app
          action: sync+restart
        - path: ./backend/requirements.txt
          target: /backend/requirements.txt
          action: rebuild
    command: >
      python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn app.main:app --host 0.0.0.0 --port 8000
  mongo:
    image: mongo
    container_name: docker-mongo-1
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb:/data/db
      - ./scripts/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    hostname: mongo

  mongo_express:
    image: mongo-express:latest
    container_name: mongo_insight
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=${MONGO_HOST}
      - ME_CONFIG_MONGODB_PORT=${MONGO_PORT}
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=${MONGO_ADMIN_ENABLE}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ADMIN_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ADMIN_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASS}
    networks:
      - app-network
    hostname: mongo-express

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: always
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - .data/qdrant/data:/qdrant/storage
    networks:
      - app-network

  redis:
    image: redis:8.0
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"      # 메시징 포트
      - "15672:15672"    # 웹 UI 포트
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: always

  mongo-seed:
    image: mongo
    depends_on:
      - mongo
    volumes:
      - ./scripts/mongo-init:/docker-entrypoint-initdb.d
    entrypoint: [ "bash", "-c", "
      sleep 10 && \
      mongoimport --host mongo --db=interior_db --collection=danawa_products --file=/docker-entrypoint-initdb.d/danawa_products.json --jsonArray --username $${MONGO_ROOT_USERNAME} --password $${MONGO_ROOT_PASSWORD} --authenticationDatabase admin && \
      mongoimport --host mongo --db=interior_db --collection=interior_types --file=/docker-entrypoint-initdb.d/interior_types.json --jsonArray --username $${MONGO_ROOT_USERNAME} --password $${MONGO_ROOT_PASSWORD} --authenticationDatabase admin
    "]
    environment:
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongodb:
  redis-data:
  rabbitmq-data: